// <auto-generated />
using System;
using ENROLLMENTSYSTEMBACKEND.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ENROLLMENTSYSTEMBACKEND.Migrations
{
    [DbContext(typeof(EnrollmentInformationDbContext))]
    partial class EnrollmentInformationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.ClosedRegistration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClosedRegistrations", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.CoursePrerequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrerequisiteCourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PrerequisiteCourseId");

                    b.ToTable("CoursePrerequisites");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.CourseRegistrationPeriod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("CourseRegistrationPeriods", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Enrollment", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnrollmentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Fee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fees", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.FeeHold", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateApplied")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeeHolds", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.FormSubmission", b =>
                {
                    b.Property<string>("SubmissionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SubmissionId");

                    b.Property<string>("ApplicantSignature")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ApplicantSignature");

                    b.Property<string>("ApplyingFor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ApplyingFor");

                    b.Property<string>("Campus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Campus");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseCode");

                    b.Property<string>("CourseLecturer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseLecturer");

                    b.Property<string>("CourseTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseTitle");

                    b.Property<string>("CurrentGrade")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentGrade");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Date");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("DeclarationAgreed")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DeclarationAgreed");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("EmailStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailStatus");

                    b.Property<string>("ExamDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExamDate");

                    b.Property<string>("ExamStartTime")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExamStartTime");

                    b.Property<string>("FormData")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FormData");

                    b.Property<string>("FormType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FormType");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName");

                    b.Property<string>("MissedExams")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MissedExams");

                    b.Property<string>("NewGrade")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NewGrade");

                    b.Property<string>("PaymentConfirmation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PaymentConfirmation");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PostalAddress");

                    b.Property<string>("Programme")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Programme");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reason");

                    b.Property<string>("ReceiptNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReceiptNo");

                    b.Property<string>("Semester")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Semester");

                    b.Property<string>("Sponsorship")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Sponsorship");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StudentId");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SubmissionDate");

                    b.Property<string>("SupportingDocuments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SupportingDocuments");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Telephone");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Year");

                    b.HasKey("SubmissionId");

                    b.ToTable("FormSubmissions", (string)null);

                    b.HasDiscriminator<string>("FormType").HasValue("FormSubmission");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Grade", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GradeValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Grades", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.GradeNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NewGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("GradeNotifications", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.GradeRecheckRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId");

                    b.ToTable("GradeRecheckRequests", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Hold", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Holds", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.PaymentRecord", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "FeeId");

                    b.ToTable("PaymentRecords", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.PendingRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseCode");

                    b.HasIndex("StudentId");

                    b.ToTable("PendingRequests", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Prerequisite", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrerequisiteCourseCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseCode", "PrerequisiteCourseCode");

                    b.ToTable("Prerequisites", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Programs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Programs", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.RegistrationPeriod", b =>
                {
                    b.Property<string>("RegistrationPeriodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("RegistrationPeriodId");

                    b.ToTable("RegistrationPeriods", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Service", b =>
                {
                    b.Property<int>("ServicesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicesId"));

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicesId");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.ServiceHold", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HoldId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceHolds", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MajorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCampus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Timetable", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Semester")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("StudentId", "CourseCode", "Semester");

                    b.ToTable("Timetables", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.UserLog", b =>
                {
                    b.Property<int>("UserLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLogId"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserLogActivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UserLogTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserProfileImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserLogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogs", (string)null);
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.CompassionateAegrotatForm", b =>
                {
                    b.HasBaseType("ENROLLMENTSYSTEMBACKEND.Models.FormSubmission");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comments");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CourseId");

                    b.Property<string>("MedicalDocumentation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedicalDocumentation");

                    b.HasIndex("CourseId");

                    b.HasDiscriminator().HasValue("CompassionateAegrotat");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.CompletionProgrammeForm", b =>
                {
                    b.HasBaseType("ENROLLMENTSYSTEMBACKEND.Models.FormSubmission");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comments");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsCompleted");

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProgramCode");

                    b.Property<string>("ProgramId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProgramId");

                    b.HasIndex("ProgramId");

                    b.HasDiscriminator().HasValue("CompletionProgramme");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.ReconsiderationForm", b =>
                {
                    b.HasBaseType("ENROLLMENTSYSTEMBACKEND.Models.FormSubmission");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comments");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CourseId");

                    b.HasIndex("CourseId");

                    b.HasDiscriminator().HasValue("Reconsideration");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.CoursePrerequisite", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Course", "Course")
                        .WithMany("Prerequisites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Course", "PrerequisiteCourse")
                        .WithMany()
                        .HasForeignKey("PrerequisiteCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Enrollment", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Grade", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.GradeNotification", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.GradeRecheckRequest", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("StudentId", "CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Grade");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Hold", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.PendingRequest", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.ServiceHold", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.UserLog", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.CompassionateAegrotatForm", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.CompletionProgrammeForm", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Programs", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.ReconsiderationForm", b =>
                {
                    b.HasOne("ENROLLMENTSYSTEMBACKEND.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ENROLLMENTSYSTEMBACKEND.Models.Course", b =>
                {
                    b.Navigation("Prerequisites");
                });
#pragma warning restore 612, 618
        }
    }
}
